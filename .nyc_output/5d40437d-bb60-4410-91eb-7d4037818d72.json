{"/Users/basilisk/markdown-editor-extras/register.js":{"path":"/Users/basilisk/markdown-editor-extras/register.js","statementMap":{"0":{"start":{"line":6,"column":15},"end":{"line":6,"column":33}},"1":{"start":{"line":7,"column":21},"end":{"line":7,"column":53}},"2":{"start":{"line":9,"column":0},"end":{"line":13,"column":3}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1},"f":{},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8311e98e9747e7720b3592418c9b9e44889c6dd2","contentHash":"b00dad2e5a0286561db77af870af012676aeaff8740ce5dd1af94b23dac029ad"},"/Users/basilisk/markdown-editor-extras/src/addExtras.ts":{"path":"/Users/basilisk/markdown-editor-extras/src/addExtras.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":27}},"4":{"start":{"line":7,"column":28},"end":{"line":7,"column":73}},"5":{"start":{"line":9,"column":32},"end":{"line":9,"column":81}},"6":{"start":{"line":10,"column":30},"end":{"line":10,"column":77}},"7":{"start":{"line":11,"column":34},"end":{"line":11,"column":85}},"8":{"start":{"line":12,"column":18},"end":{"line":88,"column":1}},"9":{"start":{"line":15,"column":4},"end":{"line":19,"column":7}},"10":{"start":{"line":20,"column":4},"end":{"line":29,"column":7}},"11":{"start":{"line":21,"column":24},"end":{"line":21,"column":28}},"12":{"start":{"line":23,"column":22},"end":{"line":23,"column":61}},"13":{"start":{"line":24,"column":12},"end":{"line":26,"column":13}},"14":{"start":{"line":25,"column":16},"end":{"line":25,"column":54}},"15":{"start":{"line":27,"column":12},"end":{"line":27,"column":58}},"16":{"start":{"line":30,"column":4},"end":{"line":30,"column":50}},"17":{"start":{"line":31,"column":4},"end":{"line":31,"column":54}},"18":{"start":{"line":36,"column":4},"end":{"line":42,"column":6}},"19":{"start":{"line":37,"column":22},"end":{"line":37,"column":33}},"20":{"start":{"line":38,"column":26},"end":{"line":38,"column":41}},"21":{"start":{"line":39,"column":21},"end":{"line":39,"column":100}},"22":{"start":{"line":40,"column":8},"end":{"line":40,"column":56}},"23":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"24":{"start":{"line":87,"column":4},"end":{"line":87,"column":22}},"25":{"start":{"line":89,"column":0},"end":{"line":89,"column":30}},"26":{"start":{"line":90,"column":0},"end":{"line":90,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":18},"end":{"line":12,"column":19}},"loc":{"start":{"line":12,"column":34},"end":{"line":88,"column":1}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":21,"column":18},"end":{"line":21,"column":19}},"loc":{"start":{"line":21,"column":24},"end":{"line":21,"column":28}},"line":21},"3":{"name":"(anonymous_3)","decl":{"start":{"line":22,"column":16},"end":{"line":22,"column":17}},"loc":{"start":{"line":22,"column":54},"end":{"line":28,"column":9}},"line":22},"4":{"name":"(anonymous_4)","decl":{"start":{"line":36,"column":48},"end":{"line":36,"column":49}},"loc":{"start":{"line":36,"column":86},"end":{"line":42,"column":5}},"line":36}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":24,"column":12},"end":{"line":26,"column":13}},"type":"if","locations":[{"start":{"line":24,"column":12},"end":{"line":26,"column":13}},{"start":{"line":24,"column":12},"end":{"line":26,"column":13}}],"line":24},"4":{"loc":{"start":{"line":39,"column":21},"end":{"line":39,"column":100}},"type":"binary-expr","locations":[{"start":{"line":39,"column":22},"end":{"line":39,"column":93}},{"start":{"line":39,"column":98},"end":{"line":39,"column":100}}],"line":39},"5":{"loc":{"start":{"line":39,"column":22},"end":{"line":39,"column":93}},"type":"cond-expr","locations":[{"start":{"line":39,"column":67},"end":{"line":39,"column":73}},{"start":{"line":39,"column":76},"end":{"line":39,"column":93}}],"line":39},"6":{"loc":{"start":{"line":39,"column":22},"end":{"line":39,"column":64}},"type":"binary-expr","locations":[{"start":{"line":39,"column":22},"end":{"line":39,"column":40}},{"start":{"line":39,"column":44},"end":{"line":39,"column":64}}],"line":39}},"s":{"0":1,"1":4,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":3,"12":6,"13":6,"14":3,"15":6,"16":1,"17":1,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":1,"26":1},"f":{"0":4,"1":1,"2":3,"3":6,"4":0},"b":{"0":[1,1,1],"1":[0,4],"2":[4,4],"3":[3,3],"4":[0,0],"5":[0,0],"6":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/basilisk/markdown-editor-extras/src/addExtras.ts","sources":["/Users/basilisk/markdown-editor-extras/src/addExtras.ts"],"names":[],"mappings":"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","sourcesContent":["import markdownItAttrs from \"markdown-it-attrs\";\n// import * as markdownItCheckbox from \"markdown-it-checkbox\";\nimport markdownItContainer from \"markdown-it-container\";\nimport markdownItDeflist from \"markdown-it-deflist\";\nimport markdownItCollapsible from \"markdown-it-collapsible\";\n// import * as markdownItEmoji from \"markdown-it-emoji\";\n// import * as markdownItFootnote from \"markdown-it-footnote\";\n// import * as markdownItHTML5Embed from \"markdown-it-html5-embed\";\n// import markdownItKbd from \"markdown-it-kbd\";\n// import * as markdownItMark from \"markdown-it-mark\";\n// import * as markdownItMultimdTable from \"markdown-it-multimd-table\";\n// import * as markdownItSub from \"markdown-it-sub\";\n// import * as markdownItSup from \"markdown-it-sup\";\n// // import * as markdownItToc from \"markdown-it-toc\";\n// import * as markdownItUnderline from \"markdown-it-underline\";\nimport MarkdownIt from \"markdown-it\";\n\nexport const addExtras = (markdownIt: MarkdownIt) => {\n  // todo: get settings as well\n\n  // Allow {.class #id data-other=\"foo\"} tags\n  markdownIt.use(markdownItAttrs, {\n    leftDelimiter: \"{\",\n    rightDelimiter: \"}\",\n    allowedAttributes: [\"class\", \"id\", /^(?!on).*$/gim],\n  });\n\n  markdownIt.use(markdownItContainer, \"any-class\", {\n    validate: () => true,\n\n    render: (tokens, idx, options, _env, self) => {\n      const m = tokens[idx].info.trim().match(/^(.*)$/);\n\n      if (tokens[idx].nesting === 1) {\n        tokens[idx].attrPush([\"class\", m[1]]);\n      }\n\n      return self.renderToken(tokens, idx, options);\n    },\n  });\n\n  markdownIt.use(markdownItDeflist);\n\n  markdownIt.use(markdownItCollapsible);\n\n  // const openLevels = [0, 0, 0, 0, 0, 0];\n\n  // let levelDepth = -1;\n\n  // change the rule applied to write a custom name attr on headers in MEME\n  // AND...allow easy folding\n  markdownIt.renderer.rules[\"heading_open\"] = (\n    tokens,\n    idx,\n    options,\n    _env,\n    self\n  ) => {\n    const token = tokens[idx];\n    const nextToken = tokens[idx + 1];\n    const link = nextToken?.content || \"\";\n\n    token.attrSet(\"name\", `${token.markup}${link}`);\n\n    return self.renderToken(tokens, idx, options);\n  };\n\n  // markdownIt.renderer.rules[\"heading_close\"] = (\n  //   tokens,\n  //   idx,\n  //   options,\n  //   _env,\n  //   self\n  // ) => {\n  //   // const token = tokens[idx];\n\n  //   const headerClose = self.renderToken(tokens, idx, options);\n\n  //   return `${headerClose}</details>`;\n  // };\n\n  // change the rule applied to write a custom name attr on headers in MEME\n  // AND...allow easy folding\n  //   markdownIt.renderer.rules[\"heading_open\"] = (\n  //     tokens,\n  //     idx,\n  //     options,\n  //     _env,\n  //     self\n  //   ) => {\n  //     const token = tokens[idx];\n  //     const nextToken = tokens[idx + 1];\n  //     const link = nextToken?.content || \"\";\n\n  //     token.attrSet(\"name\", `${token.markup}${link}`);\n\n  //     const headerOpen = self.renderToken(tokens, idx, options);\n\n  //     let wrapped = `<details open=\"1\"><summary>${headerOpen}`;\n\n  //     if (firstHeader) {\n  //       firstHeader = false;\n  //     } else {\n  //       wrapped = `</details>${wrapped}`;\n  //     }\n\n  //     console.log(\"TOKEN:\", wrapped);\n\n  //     return wrapped;\n  //   };\n\n  //   markdownIt.renderer.rules[\"heading_close\"] = (\n  //     tokens,\n  //     idx,\n  //     options,\n  //     _env,\n  //     self\n  //   ) => {\n  //     const headerClose = self.renderToken(tokens, idx, options);\n\n  //     return `${headerClose}</summary>`;\n  //   };\n\n  return markdownIt;\n};\n\nexport default addExtras;\n\n// const { markdownIt } = window.MEME;\n\n// // TODO: choose which plugins to include via settings\n\n// const attrsConfig = {\n//   leftDelimiter: \"{\",\n//   rightDelimiter: \"}\",\n//   allowedAttributes: [\"class\", \"id\", /^(?!on).*$/gim],\n// };\n\n// markdownIt.use(markdownItAttrs, attrsConfig);\n\n// // This breaks a bit of the heading_open rule in MEME, which is addressed here.\n\n// const originalHeadingOpenRule = markdownIt.renderer.rules[\"heading_open\"];\n\n// markdownIt.renderer.rules[\"heading_open\"] = (\n//   tokens,\n//   idx,\n//   options,\n//   _env,\n//   self\n// ) => {\n//   const token = tokens[idx];\n//   const nextToken = tokens[idx + 1];\n//   const link = nextToken?.content || \"\";\n\n//   token.attrSet(\"name\", `${token.markup}${link}`);\n\n//   return self.renderToken(tokens, idx, options);\n// };\n\n//   let firstHeader = true;\n\n//   // change the rule applied to write a custom name attr on headers in MEME\n//   // AND...allow easy folding\n//   markdownIt.renderer.rules[\"heading_open\"] = (\n//     tokens,\n//     idx,\n//     options,\n//     _env,\n//     self\n//   ) => {\n//     const token = tokens[idx];\n//     const nextToken = tokens[idx + 1];\n//     const link = nextToken?.content || \"\";\n\n//     token.attrSet(\"name\", `${token.markup}${link}`);\n\n//     const headerOpen = self.renderToken(tokens, idx, options);\n\n//     let wrapped = `<details open=\"1\"><summary>${headerOpen}`;\n\n//     if (firstHeader) {\n//       firstHeader = false;\n//     } else {\n//       wrapped = `</details>${wrapped}`;\n//     }\n\n//     console.log(\"TOKEN:\", wrapped);\n\n//     return wrapped;\n//   };\n\n//   markdownIt.renderer.rules[\"heading_close\"] = (\n//     tokens,\n//     idx,\n//     options,\n//     _env,\n//     self\n//   ) => {\n//     const headerClose = self.renderToken(tokens, idx, options);\n\n//     return `${headerClose}</summary>`;\n//   };\n\n//   markdownIt.use(markdownItCheckbox, {\n//     divWrap: true,\n//     divClass: \"cb\",\n//     idPrefix: \"cbx_\",\n//   });\n\n//   markdownIt.use(markdownItContainer, \"fold-closed\", {\n//     validate: (params) => {\n//       return params.trim().match(/^fold-closed\\s+(.*)$/);\n//     },\n\n//     render: (tokens, idx) => {\n//       const m = tokens[idx].info.trim().match(/^fold-closed\\s+(.*)$/);\n\n//       if (tokens[idx].nesting === 1) {\n//         return (\n//           \"<details><summary>\" +\n//           markdownIt.utils.escapeHtml(m[1]) +\n//           \"</summary>\\n\"\n//         );\n//       } else {\n//         // closing tag\n//         return \"</details>\\n\";\n//       }\n//     },\n//   });\n\n//   markdownIt.use(markdownItContainer, \"fold\", {\n//     validate: (params) => {\n//       return params.trim().match(/^fold\\s+(.*)$/);\n//     },\n\n//     render: (tokens, idx) => {\n//       const m = tokens[idx].info.trim().match(/^fold\\s+(.*)$/);\n\n//       if (tokens[idx].nesting === 1) {\n//         return (\n//           \"<details open='1'><summary>\" +\n//           markdownIt.utils.escapeHtml(m[1]) +\n//           \"</summary>\\n\"\n//         );\n//       } else {\n//         // closing tag\n//         return \"</details>\\n\";\n//       }\n//     },\n//   });\n\n//   markdownIt.use(markdownItContainer, \"any-class\", {\n//     validate: () => true,\n\n//     render: (tokens, idx, options, _env, self) => {\n//       const m = tokens[idx].info.trim().match(/^(.*)$/);\n\n//       tokens[idx].attrPush([\"class\", m[1]]);\n\n//       return self.renderToken(tokens, idx, options);\n//     },\n//   });\n\n//   // // give any other containers an 'unknown' class\n//   // markdownIt.use(markdownItContainer, \"unknown\", {\n//   //   validate: (_params) => {\n//   //     return true;\n//   //   },\n//   // });\n\n//   markdownIt.use(markdownItDeflist);\n\n//   markdownIt.use(markdownItEmoji);\n\n//   markdownIt.use(markdownItFootnote);\n\n//   markdownIt.use(markdownItHTML5Embed, {\n//     html5embed: {\n//       useImageSyntax: true, // Enables video/audio embed with ![]() syntax (default)\n//       useLinkSyntax: true, // Enables video/audio embed with []() syntax\n//     },\n//   });\n\n//   // TODO: check TS error\n//   markdownIt.use(markdownItKbd);\n\n//   markdownIt.use(markdownItMark);\n\n//   markdownIt.use(markdownItMultimdTable);\n\n//   markdownIt.use(markdownItSub);\n\n//   markdownIt.use(markdownItSup);\n\n//   // TODO: see if there's a way to link directly to a journal\n//   // markdownIt.use(markdownItToc);\n\n//   markdownIt.use(markdownItUnderline);\n\n//   console.log(\"INIT markdownit extras wATTRS!\", markdownIt);\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e57fffe1c45c9c6e242a35da71e32df723a04b01","contentHash":"682a854b42f99dcf6089986501ffa5e9838b8ac0fae0451b35094636f9e645bb"}}